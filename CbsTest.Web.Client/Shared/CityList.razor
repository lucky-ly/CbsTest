@using CbsTest.Web.Shared.City
@using Microsoft.AspNetCore.SignalR.Client
@inject CityHttpClient Http
@inject HubConnection CityHub

@if (cities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Population</th>
                <th>Foundation Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cities)
            {
               <CityRowEditor City=@item OnChanged=ItemChangedHandler OnRemoved=ItemRemovedHandler/>
            }
            <CityRowCreator OnCreated=ItemCreatedHandler/>
        </tbody>
    </table>
}

@code {
    private List<City> cities;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAllAsync();
        cities = response.Select(x => new City(x)).ToList();

        await ConnectLive();
    }

    private async Task ConnectLive()
    {
        CityHub.On<CityResponse>(nameof(ICityClient.Update), ItemUpdatedExternallyHandler);
        CityHub.On<CityResponse>(nameof(ICityClient.Create), ItemCreatedExternallyHandler);
        CityHub.On<Guid>(nameof(ICityClient.Remove), ItemRemovedExternallyHandler);

        await CityHub.StartAsync();
    }

    private void ItemUpdatedExternallyHandler(CityResponse city)
    {
        var existingCity = cities.FirstOrDefault(x => x.Id == city.Id);
        var receivedCity = new City(city);

        if(existingCity is null)
        {
            AddItem(receivedCity);
        }
        else
        {
            cities[cities.IndexOf(existingCity)] = receivedCity;
        }

        StateHasChanged();
    }

    private void ItemCreatedExternallyHandler(CityResponse city)
    {
        AddItem(new City(city));
        StateHasChanged();
    }

    private void ItemRemovedExternallyHandler(Guid id)
    {
        cities.RemoveAll(x => x.Id == id);
        StateHasChanged();
    }

    private async Task ItemChangedHandler(City item)
    {
        await Http.UpdateAsync(item.ToUpdateRequest());
    }

    private async Task ItemRemovedHandler(City item)
    {
        cities.Remove(item);

        if (item.Id != Guid.Empty)
        {
            await Http.DeleteAsync(item.Id);
        }
    }

    private async Task ItemCreatedHandler(City item)
    {
        var createdItem = await Http.CreateAsync(item.ToCreateRequest());
        item.Id = createdItem.Id;

        AddItem(item);
    }

    private void AddItem(City city)
    {
        if (cities.Exists(x => x.Id == city.Id)) return;

        cities.Add(city);
    }
}
